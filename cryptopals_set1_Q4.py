# -*- coding: utf-8 -*-
"""xorchallenge4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KD6FZrfurPAYwMYfSGNntZS7rZCFjHKR
"""

import requests

!pip install nltk

import nltk
from nltk.corpus import wordnet

#nltk.download('wordnet')  # Download WordNet data (only needed once)

url = "https://cryptopals.com/static/challenge-data/4.txt"
response = requests.get(url)
list_question = response.content.decode("ascii").splitlines()

#conduct XOR
def xor(key, ciphertext):
  key = bytes([key])
  ciphertext_inbytes = bytes.fromhex(ciphertext)
  keystream = key*len(ciphertext_inbytes)
  return [a^b for a,b in zip(ciphertext_inbytes, keystream)]

def check_if_readable_text(text):
    synset = wordnet.synsets(text)
    if len(synset) == 0:
      return False
    else:
      return True

dict_of_possibilities = {}

for i in range(256):
  for row in list_question:
    decoded = xor(i, row)
    alpha_count = sum(1 for char in decoded if chr(char).isalpha())
    alpha_percent = alpha_count / len(decoded)
    if alpha_percent > 0.7:
      decoded_char = [chr(d) for d in decoded]
      decipher = ''.join(decoded_char)
      list_decipher = decipher.split()
      if len(list_decipher)==1:continue
      else:
        list_decipher_readability = [check_if_readable_text(l) for l in list_decipher].count(True)
        readability_percent = list_decipher_readability / len(list_decipher)
        if readability_percent < 0.5: continue
        else:
          print([check_if_readable_text(l) for l in list_decipher])
          print(list_decipher)

print(dict_of_possibilities)
