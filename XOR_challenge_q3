#answer for https://cryptopals.com/sets/1/challenges/3
#thanks for 

!pip install nltk

hex_qq ="1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736"

bytes_ciphertext = bytes.fromhex(hex_qq)

#conduct XOR
def xor(key, ciphertext):
  key_byte = bytes([key])
  keystream = key_byte*len(ciphertext)
  return ([x^y for (x,y) in zip(ciphertext, keystream)]) 

#loop through all 256 iterations
dict_all_outputs = {}

for i in range(256):
  decrypted = xor(i, bytes_ciphertext)
  len_decrypted = len(decrypted)
  count_is_alpha=0
  for j in decrypted:
    if (j >=65) and (j<=122): #a=65, Z=122
      count_is_alpha+=1
    else:continue
  score = count_is_alpha/len_decrypted
  dict_all_outputs[i] = score


print(sorted(dict_all_outputs.items(), key=lambda x: x[1], reverse=True))

# Download WordNet data (only needed once)
import nltk
from nltk.corpus import wordnet

#filter out only text with high number of 
dict_above_7 = {key: value for key, value in dict_all_outputs.items() if value >= 0.7}

def check_if_readable_text(text):
    synset = wordnet.synsets(text)
    if len(synset) == 0:
      return False
    else:
      return True

hex_qq ="1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736"

bytes_ciphertext = bytes.fromhex(hex_qq)

key_percentTrue = {}

for key, value in dict_above_7.items():
  letter = bytes([key]).decode("ascii")
  phrase = bytes(xor(key,bytes_ciphertext)).decode("ascii").split()
  if len(phrase)==1:continue
  else:
    list_readability = [check_if_readable_text(w) for w in phrase]
    percent_True = list_readability.count(True)/len(phrase)
    key_percentTrue[key] = percent_True

max_percentTrue =max(key_percentTrue.values())

answer = [key for key in key_percentTrue if key_percentTrue[key] == max_percentTrue][0]

print(bytes([answer]).decode("ascii"))
print(bytes(xor(answer,bytes_ciphertext)).decode("ascii"))

'''
answer=X
ciphertext = Cooking MC's like a pound of bacon
'''
